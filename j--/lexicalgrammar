// Copyright 2012- Bill Campbell, Swami Iyer and Bahar Akbal-Delibas.
//
// Lexical grammar for j--.

// Whitespace -- ignored
" " | "\t" | "\n" | "\r" | "\f"

// Single line comment -- ignored
"//" { ~( "\n" | "\r" ) } ( "\n" | "\r" ["\n"] )

//Multiline comment -- ignored
"/*" { ~( "*/" ) } "*/"

// Reserved words
ABSTRACT       ::= "abstract"
BOOLEAN        ::= "boolean"
CHAR           ::= "char"
CLASS          ::= "class"
ELSE           ::= "else"
EXTENDS        ::= "extends"
FALSE          ::= "false"
IF             ::= "if"
IMPORT         ::= "import"
INSTANCEOF     ::= "instanceof"
INT            ::= "int"
NEW            ::= "new"
NULL           ::= "null"
PACKAGE        ::= "package"
PRIVATE        ::= "private"
PROTECTED      ::= "protected"
PUBLIC         ::= "public"
RETURN         ::= "return"
STATIC         ::= "static"
SUPER          ::= "super"
THIS           ::= "this"
TRUE           ::= "true"
VOID           ::= "void"
WHILE          ::= "while"
BREAK          ::= "break"
CONTINUE       ::= "continue"
DOUBLE         ::= "double"
FOR            ::= "for"
LONG           ::= "long"
THROWS         ::= "throws"
CASE           ::= "case"
DEFLT        ::= "default"
FINAL          ::= "final"
IMPLEMENTS     ::= "implements"
SWITCH         ::= "switch"
TRY            ::= "try"
CATCH          ::= "catch"
DO             ::= "do"
FINALLY        ::= "finally"
INTERFACE      ::= "interface"
THROW          ::= "throw"


// Separators
COMMA          ::= ","
DOT            ::= "."
LBRACK         ::= "["
LCURLY         ::= "{"
LPAREN         ::= "("
RBRACK         ::= "]"
RCURLY         ::= "}"
RPAREN         ::= ")"
SEMI           ::= ";"

// Operators
ASSIGN         ::= "="
DEC            ::= "--"
EQUAL          ::= "=="
GT             ::= ">"
INC            ::= "++"
LAND           ::= "&&"
LE             ::= "<="
LNOT           ::= "!"
MINUS          ::= "-"
PLUS           ::= "+"
PLUS_ASSIGN    ::= "+="
STAR           ::= "*"
DIV            ::= "/"
REM            ::= "%"
ALSHIFT        ::= "<<"
ARSHIFT        ::= ">>"
LRSHIFT        ::= ">>>"
OR             ::= "|"
XOR            ::= "^"
AND            ::= "&"
QUESTION       ::= "?"
COLON          ::= ":"
NOT            ::= "~"
NOT_EQUAL      ::= "!="
DIV_ASSIGN     ::= "/="
MINUS_ASSIGN   ::= "-="
STAR_ASSIGN    ::= "*="
REM_ASSIGN     ::= "%="
ARSHIFT_ASSIGN ::= ">>="
LRSHIFT_ASSIGN ::= ">>>="
GE             ::= ">="
ALSHIFT_ASSIGN ::= "<<="
LT             ::= "<"
XOR_ASSIGN     ::= "^="
AND_ASSIGN     ::= "&="
OR_ASSIGN      ::= "|="
LOR            ::= "||"







// Identifiers
IDENTIFIER     ::= ( "a"..."z" | "A"..."Z" | "_" | "$" )
                       { "a"..."z" | "A"..."Z" | "_" | "0"..."9" | "$" }

// Literals
DIGITS         ::= ( "0"..."9" ) { "0"..."9" }
INT_LITERAL    ::= DIGITS
LONG_LITERAL   ::= INT_LITERAL ( "l" | "L")
EXPONENT       ::= ( "e" | "E" ) [ ( "+" | "-" ) ] DIGITS
SUFFIX         ::= "d" | "D"
DOUBLE_LITERAL ::= DIGITS "." [ DIGITS ] [ EXPONENT ] [ SUFFIX ] | "." DIGITS [ EXPONENT ] [ SUFFIX ] | DIGITS EXPONENT [ SUFFIX ] | DIGITS [ EXPONENT ] SUFFIX
ESC            ::= "\\" ( "n" | "r" | "t" | "b" | "f" | "'" | "\"" | "\\" )
STRING_LITERAL ::= "\"" { ESC | ~( "\"" | "\\" | "\n" | "\r" ) } "\""
CHAR_LITERAL   ::= "'" ( ESC | ~( "'" | "\n" | "\r" | "\\" ) ) "'"

// End of file
EOF            ::= "<end of file>"
